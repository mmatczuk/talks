HTTP Proxying 101
and lessons learned from building a proxy in Go

Michał Matczuk
Sauce Labs

michal.matczuk@saucelabs.com

* Proxy

.image ./img/proxy2.png _ 600

* Some well-known proxies

# - TLS termination
# - Load balancing
# - Caching
# - Rate limiting

.image ./img/envoy.svg _ 200
.image ./img/ngnix.svg _ 200

* Proxies for developers?

# - Debug / Reverse engineer APIs
# - Modify traffic
# - Record and replay HTTP traffic
# - Simulate network conditions

.image ./img/mitmproxy.png _ 300
.image ./img/polyjs.png _ 200
.image ./img/toxiproxy.png _ 300

* What am I building?

Forwarder Proxy

- forwarder-proxy.io
- github.com/saucelabs/forwarder

Sauce Connect - reverse tunnels over HTTP/2

* Why build a proxy in Go?

- Reasonably fast
- Good tooling for networking
- No so much great libraries for proxies unfortunately
- Very easy to distribute (cross platform)

* Forward vs Reverse proxy

* Reverse proxy

.image ./img/reverse_proxy_flow.png _ 1000

* Forward proxy

.image ./img/forward_proxy_flow.png _ 1000

* Transparent proxy

iptables

.image ./img/transparent.png _ 700

IP_TRANSPARENT socket option:

- Binding to addresses that are not (usually) considered local
- Receiving connections and packets from iptables TPROXY redirected sessions

* Proxy protocols

* HTTP proxy protocol 🐛

HTTPS

.code ./src/connect.http

- Works everywhere
- TCP only
- Proxy-Authorization header
- Optional encryption (HTTPS)
- No multiplexing (solved* by HTTP/2)️

* SOCKS5

.code ./src/socks5_req.txt

https://datatracker.ietf.org/doc/html/rfc1928

# o  VER    protocol version: X'05'
# o  CMD
#    o  CONNECT X'01'
#    o  BIND X'02'
#    o  UDP ASSOCIATE X'03'
# o  RSV    RESERVED
# o  ATYP   address type of following address
#    o  IP V4 address: X'01'
#    o  DOMAINNAME: X'03'
#    o  IP V6 address: X'04'
# o  DST.ADDR       desired destination address
# o  DST.PORT desired destination port in network octet
#    order
# o  VER    protocol version: X'05'
# o  REP    Reply field:
#    o  X'00' succeeded
#    o  X'01' general SOCKS server failure
#    o  X'02' connection not allowed by ruleset
#    o  X'03' Network unreachable
#    o  X'04' Host unreachable
#    o  X'05' Connection refused
#    o  X'06' TTL expired
#    o  X'07' Command not supported
#    o  X'08' Address type not supported
#    o  X'09' to X'FF' unassigned
# o  RSV    RESERVED
# o  ATYP   address type of following address

- TPC/UDP
- Authentication
- IPv6
- No encryption
- No multiplexing

* SOCKS4

- no authentication
- no IPv6
- no UDP

🇨🇳 Lesser known socks inspired protocols like Shadowsocks...

* HTTP CONNECT over HTTP/2, HTTP/3

.image ./img/h2.svg _ 400

- Works everywhere
- Multiplexing
- Eliminates HOL blocking at the application layer (HTTP/2)
- Eliminates HOL blocking at the transport layer (HTTP/3)

* HTTP/2 for proxies

- Supported by curl
- Supported by browsers
- Not supported by Go https://github.com/golang/go/issues/26479

Accepting connection cheap, dialing expensive 🤔

.image ./img/h2proxy.png _ 800

https://httpwg.org/specs/rfc9113.html#connectDos

* HTTP/3 for proxies

Envoy

.image ./img/h3envoy.png _ 600
.image ./img/h3envoybpf.png _ 600

* HTTP/3 for proxies

.image ./img/h3mitmproxy.png _ 600
.image ./img/h3mitmproxy2.png _ 600

* HTTP proxying

* HTTP proxying

- HTTP is open to 🐛 interpretation
- HTTP is overly complex
- HTTP/1/2/3 interop issues

* HTTP proxying

Sometimes the easy way is the hard way.
― George W. Parker

# Excess found: excess = 2 url = / (zero-length body)
# curl -x localhost:3128 -v --head http://www.google.com
#Connected to :: (::1) port 54174
#> HEAD http://www.google.com/ HTTP/1.1
#> Host: www.google.com
#> User-Agent: curl/8.4.0
#> Accept: */*
#> Proxy-Connection: Keep-Alive
#>
#< HTTP/1.1 200 OK
#< Transfer-Encoding: chunked
#<

* Transfer-Encoding: chunked

- Introduced in HTTP 1.1 - 1997 (year after HTTP 1.0)
- Content-Length is omitted - really?

Example:

6\r\n
Sauce \r\n
4\r\n
Labs\r\n
0\r\n

.image ./img/transferencoding.png _ 600

* Transfer-Encoding: chunked

Envoy

.image ./img/envoy_allow_chunked_length.png _ 800

* Request Smuggling Via Malicious Content Lengths

Content-Length and Transfer-Encoding 💣 💣 💣

.image ./img/smuggling.png _ 700

https://www.youtube.com/watch?v=gAnDUoq1NzQ

* Remove Hop-by-hop Headers

.code ./src/hopbyhop.go

HTTP/2

Connection: close header makes whole TCP connection unusable

* Don't remove Hop-by-hop Headers

for protocol upgrades

# WS client sends CONNECT

.code ./src/upgrade.http

* Go tip

If response status code is 101 (Switching Protocols) then

body is writable

.code ./src/upgrade.go

* Go tip

You can flush response after headers to prevent buffering

.code ./src/flush.go

* Buffering

* Buffer based APIs

 http.ReadRequest(b *bufio.Reader) (*Request, error)
 http.ReadResponse(b *bufio.Reader, req *Request) (*Response, error)
 Hijack() (net.Conn, *bufio.ReadWriter, error)

Prevent data loss - always handle buffered data

- Byte reader - for reading CONNECT requests
- Buffer draining - write buffer first
- io.MultiReader

* Buffer Intelligently

Don't buffer whole request / response

- Latency, Latency, Latency
- OOM
- SSE

Use io.Reader / io.Writer based APIs 😻

* How to flush?

- APIs require buffered connections - good
- io.Copy on a buffered connection may cause a deadlock - bad

* How to flush?

Flush interval

net/http/httputil.ReverseProxy

.image ./img/flush.png _ 600

* How to flush?

Flush on write may be suboptimal

Content aware flushing is better

.code ./src/flush2.go

* Pass TCP FIN

API:

- TCPConn.Close()
- TCPConn.CloseRead()
- TCPConn.CloseWrite()

On EOF:

- Don't close TCP connection
- Close writing side of the upstream connection
- May not be easy with wrapped connections
- We use reflection to find underlying TCPConn

* Performance

* Go tip

Setting GOMEMLIMIT defers GC

.image ./img/gomemlimit.png _ 600

* Use io.CopyBuffer instead of io.Copy

- io.Copy uses 32KB buffer allocated on each call

.image ./img/copy.png _ 600

* Use io.CopyBuffer instead of io.Copy

.image ./img/copybuffer.png _ 600

* Use io.CopyBuffer instead of io.Copy

io: allocate copy buffers from a pool

.image ./img/copypool.png _ 600

https://github.com/golang/go/commit/7d7fd6d3627f7dbba250ecfecea2f5ffe6c5aaa7

Reverted

* Questions?

